<?xml version="1.0"?>

<project name="Oware" default="build" basedir="." >

	<property environment="env" />
	<property name="sony.location" value="C:/SONYER~1/JavaME_SDK_CLDC/PC_Emulation/WTK2/" />

	<property name="device.props" value="" />
	<property name="build.template" value="" />
	<property name="wtk.template" value="" />
	<property name="beta.vers" value="" />
	<echo message="build.template=${build.template}" />
	<echo message="wtk.properties=${wtk.properties}" />
	<echo message="wtk.template=${wtk.template}" />
	<echo message="release.template=${release.template}" />
	<echo message="test.template=${test.template}" />
	<echo message="optional.template=${optional.template}" />
	<echo message="DLOGDEF=${DLOGDEF}" />
	<echo message="presrc=${presrc}" />
	<echo message="res=${res}" />
	<property name="DEBUG" value="DEBUG" />
	<property name="target" value="../target" />
	<property name="tmpres" value="${target}/tmpres" />
	<property name="tmpcat" value="${target}/tmpcat" />
	<property name="webtestdata" value="${target}/webtestdata" />
	<property name="filetestdata" value="${target}/filetestdata" />
	<property name="analyze" value="${target}/analyze" />
	<property name="dist" value="${target}/dist" />
	<property name="dist.midp10" value="${target}/dist/midp10" />
	<property name="dist.midp10.large" value="${target}/dist/midp10_large" />
	<property name="dist.midp20" value="${target}/dist/midp20" />
	<property name="dist.midp20.large" value="${target}/dist/midp20_large" />
	<property name="dist.midp20.cldc11" value="${target}/dist/midp20_cldc11" />
	<property name="dist.midp20.jsr75" value="${target}/dist/midp20_jsr75" />
	<property name="dist.midp20.jsr135" value="${target}/dist/midp20_jsr135" />
	<property name="dist.midp20.cldc11.jsr135" value="${target}/dist/midp20_cldc11_jsr135" />
	<property name="dist.midp20.large.jsr135" value="${target}/dist/midp20_large_jsr135" />
	<property name="dist.midp20.cldc11.jsr75" value="${target}/dist/midp20_cldc11_jsr75" />
	<property name="dist.midp20.cldc11.jsr75.largemem" value="${target}/dist/midp20_cldc11_jsr75_largemem" />
	<property name="dist.midp20.cldc11.jsr75.jsr82.jsr184.largemem" value="${target}/dist/midp20_cldc11_jsr75_jsr82_jsr184_largemem" />
	<property name="dist.midp20.cldc11.jsr75.jsr82.jsr135.jsr184" value="${target}/dist/midp20_cldc11_jsr75_jsr82_jsr135_jsr184" />
	<property name="dist.midp20.cldc11.jsr75.jsr82.jsr135.jsr184.largemem" value="${target}/dist/midp20_cldc11_jsr75_jsr82_jsr135_jsr184_largemem" />
	<property name="dist.midp20.cldc11.largemem" value="${target}/dist/midp20_cldc11_largemem" />
	<property name="dist.midp20.jsr75_jsr238" value="${target}/dist/midp20_jsr75_jsr238" />
	<property name="build" value="${target}/build" />
	<property name="build.midp10" value="${target}/build/midp10" />
	<property name="build.midp10.large" value="${target}/build/midp10_large" />
	<property name="build.midp20" value="${target}/build/midp20" />
	<property name="build.midp20.large" value="${target}/build/midp20_large" />
	<property name="build.midp20.cldc11" value="${target}/build/midp20_cldc11" />
	<property name="build.midp20.jsr75" value="${target}/build/midp20_jsr75" />
	<property name="build.midp20.jsr135" value="${target}/build/midp20_jsr135" />
	<property name="build.midp20.cldc11.jsr135" value="${target}/build/midp20_cldc11_jsr135" />
	<property name="build.midp20.large.jsr135" value="${target}/build/midp20_large_jsr135" />
	<property name="build.midp20.cldc11.jsr75" value="${target}/build/midp20_cldc11_jsr75" />
	<property name="build.midp20.cldc11.jsr75.largemem" value="${target}/build/midp20_cldc11_jsr75.largemem" />
	<property name="build.midp20.cldc11.largemem" value="${target}/build/midp20_cldc11_largemem" />
	<property name="build.midp20.cldc11.jsr75.jsr82.jsr184.largemem" value="${target}/build/midp20_cldc11_jsr75_jsr82_jsr184.largemem" />
	<property name="build.midp20.cldc11.jsr75.jsr82.jsr135.jsr184.largemem" value="${target}/build/midp20_cldc11_jsr75_jsr82_jsr135_jsr184.largemem" />
	<property name="build.midp20.cldc11.jsr75.jsr82.jsr135.jsr184" value="${target}/build/midp20_cldc11_jsr75_jsr82_jsr135_jsr184" />
	<property name="build.midp20.jsr75.jsr238" value="${target}/build/midp20_jsr75.jsr238" />
	<property name="classes" value="${target}/classes" />
	<property name="tmppreprocess" value="${target}/tmppreprocess" />
	<property name="tmpconcat" value="${target}/tmpconcat" />
	<property name="util.tmppreprocess" value="${target}/util.tmppreprocess" />
	<property name="ext.drive" value="${env.EXT_DRIVE}" />
	<property file="${basedir}/wtk-build${device.props}.properties${build.template}" />
	<property name="DFEATUREFORMDEF" value="DFEATUREFORMDEF" />
	<!-- DCOMPATDEF is used to test compatibility store/restore of date -->
	<property name="DCOMPATDEF" value="DNOCOMPAT" />
	<echo message="unproc.src=${unproc.src}" />
	<echo message="util.src=${util.src}" />
	<fail message="Must set comp.src to src directory to put the source to compile." unless="comp.src" />

	<!-- Define the tasks. -->

	<!-- clean up the project -->
	<target name="clean" >
		<delete dir="${target}" />
		<antcall target="clean.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.jsr75.properties${wtk.template}" />
		</antcall>
	</target>

	<!-- clean up the compile -->
	<target name="clean.compile">
		<delete dir="${classes}" />
	</target>

	<!-- TODO -->
	<target name="clean.version">
		<delete dir="${classes}" />
	</target>

	<target name="test.prepare" unless="no.test" >
	    <echo message="Using test properties" />
	    <echo message="no.release=${no.release}" />
		<property file="${basedir}/test.properties${test.template}" />
		<property name="jlogmicro.jad" value="${jlogmicro.jad}" />
		<property name="jlogmicro.nbr" value="${jlogmicro.nbr}" />
		<antcall target="test.buildno" />
		<property file="${basedir}/test_buildinfo.properties${test.template}" />
	    <echo message="build.number=${build.number}" />
	</target>

	<target name="test.buildno" unless="test.buildinfo" >
	    <echo message="Using test properties" />
	    <echo message="no.release=${no.release}" />
		<buildnumber file="${basedir}/test_buildinfo.properties${test.template}" />
	    <echo message="Release buildinfo update." />
		<property name="test.buildno" value="true" />
	</target>

	<target name="release.prepare" unless="no.release" >
	    <echo message="Using release properties" />
		<property file="${basedir}/release.properties${release.template}" />
	    <echo message="RELEASE=${RELEASE}" />
	    <echo message="build.number=${build.number}" />
		<antcall target="release.buildno" />
		<property file="${basedir}/release_buildinfo.properties${release.template}" />
	    <echo message="build.number=${build.number}" />
	</target>

	<target name="release.buildno" unless="release.buildno" >
		<buildnumber file="${basedir}/release_buildinfo.properties${release.template}" />
	    <echo message="Release buildinfo update." />
		<property name="release.buildno" value="true" />
	</target>

	<target name="staging.prepare" unless="no.staging" >
	    <echo message="Using release staging properties" />
		<property file="${basedir}/staging.properties" />
	</target>

	<target name="prepare.no.large" >
			<property name="no.1.0.large" value="true" />
			<property name="no.2.0.jsr135.large" value="true" />
			<property name="no.2.0.large" value="true" />
			<property name="no.2.0.jsr135.large" value="true" />
			<property name="no.2.0.cldc.1.1.jsr75.largemem" value="true" />
			<property name="no.2.0.cldc.1.1.largemem" value="true" />
			<property name="no.2.0.cldc.1.1.jsr75.jsr82.jsr184.largemem" value="true" />
			<property name="no.2.0.cldc.1.1.jsr75.jsr82.jsr135.jsr184.largemem" value="true" />
	</target>

	<target name="prepare.large" >
			<property name="no.1.0" value="true" />
			<property name="no.2.0" value="true" />
			<property name="no.2.0.cldc.1.1" value="true" />
			<property name="no.2.0.jsr75" value="true" />
			<property name="no.2.0.jsr135" value="true" />
			<property name="no.2.0.cldc.1.1.jsr75" value="true" />
			<property name="no.2.0.cldc.1.1.jsr135" value="true" />
			<property name="no.2.0.jsr238" value="true" />
	</target>

	<target name="prepare.games" depends="prepare.no.large" >
			<property name="Testsuite-concat.jad" value="" />
			<property name="src.excludes" value="**/testsuite/**,testsuite/**" />
			<property name="res.excludes" value="**/testsuite*,testsuite*" />
	</target>

	<target name="prepare.reversi" depends="prepare.no.large" >
			<property name="release.name" value="Reversi" />
			<property name="MIDLETICON" value="/reversi_icon.png" />
			<property name="MIDLETDESC" value="Reversi Game" />
			<property name="Reversi-concat.nbr" value="1" />
			<property name="Oware-concat.jad" value="" />
			<property name="Minesweeper-concat.jad" value="" />
			<property name="Testsuite-concat.jad" value="" />
			<property name="src.excludes" value="**/testsuite/**,**/minesweeper/**,**/Oware*,**/Mine*,testsuite/**,minesweeper/**,Oware*,Mine*" />
			<property name="res.excludes" value="**/oware*,**/mine*,**/testsuite*,oware*,mine*,testsuite*" />
	</target>

	<target name="prepare.testsuite" depends="prepare.large" >
			<property name="release.name" value="TestSuite" />
			<property name="MIDLETICON" value="/testsuite_icon.png" />
			<property name="MIDLETDESC" value="Test Suite" />
			<property name="Testsuite-concat.nbr" value="1" />
			<property name="Oware-concat.jad" value="" />
			<property name="Minesweeper-concat.jad" value="" />
			<property name="Reversi-concat.jad" value="" />
			<property name="src.excludes" value="**/reversi/**,**/minesweeper/**,**/Oware*,**/Reversi*,**/Mine*,reversi/**,minesweeper/**,Oware*,Mine*" />
			<property name="res.excludes" value="**/oware*,**/mine*,**/reversi*,oware*,mine*,reversi*" />
	</target>

	<!-- prepare the target folder -->
	<target name="prepare" depends="test.prepare,release.prepare" >
		<property name="release.name" value="${project.name}" />
		<property file="${basedir}/midlet.properties${optional.template}" />
		<!-- Define the Wireless Toolkit home directory. Needed by the tasks. -->
		<!-- Define some additional properties for this project. Not required. -->
		<property file="${basedir}/optional.properties${optional.template}" />
		<property name="propdir" value="${basedir}" />
		<property file="${basedir}/${wtk.properties}" />
		<property name="PERMISSIONS" value="" />
		<!-- Use an invalid value.  The extra 0's mean that it will not match -->
		<!-- anything in the code. -->
		<property name="IGNOREKEYS" value="0000" />
		<property name="DJSR82" value="DNOJSR82" />
		<property name="DJSR135" value="DNOJSR135" />
		<property name="DJSR184" value="DNOJSR184" />
		<property name="log.subdir" value="jlogmicro" />
		<property name="GRAPHICS" value="true" />
		<property name="PRECALCULATE" value="false" />
		<property name="Oware-concat.jad" value="Oware-concat.jad" />
		<property name="Oware-concat.nbr" value="1" />
		<property name="Reversi-concat.jad" value="Reversi-concat.jad" />
		<property name="Reversi-concat.nbr" value="2" />
		<property name="Minesweeper-concat.jad" value="Minesweeper-concat.jad" />
		<property name="Minesweeper-concat.nbr" value="3" />
		<property name="Testsuite-concat.jad" value="Testsuite-concat.jad" />
		<property name="Testsuite-concat.nbr" value="4" />
		<!-- undo
		<property name="language.file" value="messages_en_US.xml" />
		<xmlproperty file="${msg.dir}/${language.file}" collapseAttributes="true" />
		<echo message="Language file=${msg.dir}/${language.file}" />
		<property name="loading.text" value="${properties.node.map.node.map.node.map.entry}" />
		<property name="loading.items.text" value="${properties.node.map.node.map.entry}" />
		<echo message="prop load=${loading.text}" />
		<echo message="prop load items=${loading.items.text}" />
		-->
		<property name="stage" value="" />
		<property name="build.prefix" value="${file.prefix}${stage}" />
		<property name="build.file.root" value="${build.prefix}${release.name}-${FMIDLETVERSROOT}" />
		<property name="alx.build.file.root" value="${build.prefix}${release.name}_${FMIDLETVERSROOT}" />
		<property name="buildinfo" value="${SUFFIXVERS}-${stage}b${build.number}" />
		<!-- changed -->
		<mkdir dir="${target}" />
		<mkdir dir="${classes}" />
		<property name="EMULATOR" value="true" />
		<property name="main" value="${target}/main" />
		<property name="svnexport" value="${build}/svnexport" />
		<property name="compiled" value="${build}/${build.prefix}pcompiled" />
		<property name="preverified" value="${build}/${build.prefix}preverified" />
		<property name="preprocessed" value="${build}/${build.prefix}preprocessed" />
		<property name="obfuscated" value="${build}/${build.prefix}obfuscated" />
		<filterset id="defile.filter" >
			<filter token="DMIDPVERS" value="//#define ${DMIDPVERS}" />
			<filter token="DFEATUREFORMIMPORTDEF" value="${DFEATUREFORMIMPORTDEF}" />
			<filter token="DCLDCVERS" value="//#define ${DCLDCVERS}" />
			<filter token="DFEATUREFORMDEF" value="//#define ${DFEATUREFORMDEF}" />
			<filter token="DMEMSIZEDEF" value="//#define ${DMEMSIZEDEF}" />
			<filter token="DITUNESDEF" value="//#define ${DITUNESDEF}" />
			<filter token="DJSR75" value="//#define ${DJSR75}" />
			<filter token="DJSR82" value="//#define ${DJSR82}" />
			<filter token="DJSR135" value="//#define ${DJSR135}" />
			<filter token="DJSR184" value="//#define ${DJSR184}" />
			<filter token="DJSR238" value="//#define ${DJSR238}" />
			<filter token="DTESTDEF" value="//#define ${DTESTDEF}" />
			<filter token="DJMTESTDEF" value="//#define ${DJMTESTDEF}" />
			<filter token="DCOMPATDEF" value="//#define ${DCOMPATDEF}" />
			<filter token="DTESTUIDEF" value="//#define ${DTESTUIDEF}" />
			<filter token="DLOGDEF" value="//#define ${DLOGDEF}" />
			<filter token="PROGVERS" value="${buildinfo}" />
		</filterset>
		<filterset id="midlet.info" >
			<filter token="MIDPVERS" value="${wtk.midp.version}" />
			<filter token="CLDCVERS" value="${wtk.cldc.version}" />
			<filter token="MIDLETVERS" value="${MIDLETVERS}" />
			<filter token="PERMISSIONS" value="${PERMISSIONS}" />
			<filter token="IGNOREKEYS" value="${IGNOREKEYS}" />
			<filter token="MIDLETDESC" value="${MIDLETDESC}" />
			<filter token="GRAPHICS" value="${GRAPHICS}" />
			<filter token="MIDLETNAME" value="${release.name}" />
			<filter token="MIDLETICON" value="${MIDLETICON}" />
			<filter token="PRECALCULATE" value="${PRECALCULATE}" />
			<filter token="PROGVERS" value="${buildinfo}" />
			<filter token="ICONDIR" value="${res.todir}" />
			<filter token="BUILDPREFIX" value="${build.prefix}" />
			<filter token="FMIDLETVERSROOT" value="${FMIDLETVERSROOT}" />
			<filter token="JMIDPVERS" value="${JMIDPVERS}" />
			<filter token="JCLDCVERS" value="${JCLDCVERS}" />
			<filter token="EMULATOR" value="${EMULATOR}" />
			<filter token="LOADING" value="${loading.text}" />
			<filter token="LOADING.ITEMS" value="${loading.items.text}" />
		</filterset>

	</target>

    <echo message="location='${antenna.home}/${antenna.jar}'" />
	<taskdef resource="antenna.properties" >
	  <classpath>
		<pathelement location="${antenna.home}/${antenna.jar}" />
	  </classpath>
	</taskdef>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${antcontrib.home}/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

	<!--
	<taskdef resource="svntask.properties" >
	  <classpath>
		<pathelement location="${svnant.home}/svnant.jar" />
		<pathelement location="${svnant.home}/svnClientAdapter.jar" />
	  </classpath>
	</taskdef>
	-->

	<!--
	<taskdef resource="com/idaremedia/svn4ant/client/antlib.xml" >
	  <classpath>
		<pathelement location="${svnant.home}/dependencies/antx/lib/AntX_tasks.jar" />
		<pathelement location="${svnant.home}/dependencies/antx/lib/JWare_apis.jar" />
		<pathelement location="${svnant.home}/dependencies/antx/src.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/ganymed.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/svnkit-cli.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/svnkit.jar" />
	  </classpath>
	</taskdef>
	-->

	<target name="display.props" >
	    <echo message="src=${src}" />
	    <echo message="presrc=${presrc}" />
	    <echo message="svnexport=${svnexport}" />
	    <echo message="main=${main}" />
	    <echo message="jar.presrc=${jar.presrc}" />
	    <echo message="msg.dir=${msg.dir}" />
	    <echo message="compat.presrc=${compat.presrc}" />
	    <echo message="testui.presrc=${testui.presrc}" />
	    <echo message="build.number=${build.number}" />
	    <echo message="DMIDPVERS=${DMIDPVERS}" />
	    <echo message="DCLDCVERS=${DCLDCVERS}" />
	    <echo message="DITUNESDEF=${DITUNESDEF}" />
	    <echo message="DMEMSIZEDEF=${DMEMSIZEDEF}" />
	    <echo message="DFEATUREFORMDEF=${DFEATUREFORMDEF}" />
	    <echo message="DFEATUREFORMIMPORTDEF=${DFEATUREFORMIMPORTDEF}" />
	    <echo message="DJSR75=${DJSR75}" />
	    <echo message="DJSR82=${DJSR82}" />
	    <echo message="DJSR135=${DJSR135}" />
	    <echo message="DJSR184=${DJSR184}" />
	    <echo message="DJSR238=${DJSR238}" />
	    <echo message="IGNOREKEYS=${IGNOREKEYS}" />
	    <echo message="DTESTDEF=${DTESTDEF}" />
	    <echo message="DJMTESTDEF=${DJMTESTDEF}" />
	    <echo message="DTESTUIDEF=${DTESTUIDEF}" />
	    <echo message="DCOMPATDEF=${DCOMPATDEF}" />
	    <echo message="wtk.optionalpda.enabled=${wtk.optionalpda.enabled}" />
	    <echo message="DLOGDEF=${DLOGDEF}" />
	    <echo message="no.test=${no.test}" />
	    <echo message="no.staging=${no.staging}" />
	    <echo message="no.release=${no.release}" />
	    <echo message="need.test.res=${need.test.res}" />
	    <echo message="manifestsrc=${manifestsrc}" />
	</target>

	<path id="logging.lib" >
		<fileset dir="../lib" >
			<include name="*.jar" />
		</fileset>
	</path>
	<!-- Preprocess source using antenna preprocessor.  If preproccess -->
	<!-- is not used, this copies the src to the directory to compile -->
	<!-- comp.src. -->
	<target name="preprocess" depends="prepare" if="presrc" >
		<antcall target="display.props" />
		<!-- Copy unpreprocessed source to compiled src dir -->
		<delete dir="${tmppreprocess}" />
		<mkdir dir="${tmppreprocess}" />
		<property name="preprocess.defines" value="DEBUG=WARN,${DMIDPVERS},${DCLDCVERS},${DITUNESDEF},${DMEMSIZEDEF},${DJSR75},${DJSR82},${DJSR135},${DJSR184},${DJSR238},${DTESTDEF},${DJMTESTDEF},${DLOGDEF},${DTESTUIDEF},${DCOMPATDEF},${DFEATUREFORMDEF}" />
		<echo message="preprocess.defines=${preprocess.defines}." />
		<wtkpreprocess srcdir="${presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" if="presrc" />
		<echo message="Preprocess util pre src if set ${presrc.util.src}." />
		<wtkpreprocess srcdir="${presrc.util.src}" destdir="${util.tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="true" if="presrc.util.src" />
		<echo message="Preprocess JMUnit pre src if set ${jmunit.src}." />
		<wtkpreprocess srcdir="${jmunit.src}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="true" if="jmunit.src" />
		<echo message="Preprocess test UI if set ${testui.presrc}." />
		<wtkpreprocess srcdir="${testui.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="true" if="testui.presrc" />
		<echo message="Preprocess compatiblity code if set ${compat.presrc}." />
		<wtkpreprocess srcdir="${compat.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" if="compat.presrc" />
		<echo message="Preprocess jar src if set ${jar.presrc}." />
		<wtkpreprocess srcdir="${jar.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" if="jar.presrc" />
		<property name="src.excludes" value="bogus" />
		<echo message="src.excludes=${src.excludes}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${tmppreprocess}" includes="**/*.java" excludes="${src.excludes}" />
			<filterset refid="defile.filter" />
		</copy>
		<delete>
			<fileset dir="${comp.src}" includes="${src.excludes}" />
		</delete>
		<antcall target="util.comp.copy" />
		<antcall target="delete.test.src" >
			<param name="dsrc" value="${comp.src}" />
		</antcall>
		<antcall target="wtk.src.copy" />
		<antcall target="copy.res" >
			<param name="to.res.dir" value="${wtk.res}" />
		</antcall>
		<antcall target="ecj.compile" />
		<antcall target="findbugs" />
		<antcall target="pmd" />
		<zip destfile="${zipdir}/${build.prefix}src.zip" basedir="${comp.src}" update="true" />
	</target>

	<target name="ecj.compile" if="ecj.jar" >
		<echo message="-bootclasspath" />
		<echo message="wtk.midpapi=${wtk.midpapi}" />
		<echo message="-classpath" />
		<echo message="${rt.jar}" />
		<echo message="-d" />
		<echo message="${classes}" />
		<echo message="${comp.src}" />
		<java jar="${ecj.jar}" fork="true" >
			<arg value="-bootclasspath" />
			<arg value="${wtk.midpapi}" />
			<!--
			<arg value="${ecj.bootclasspath}" />
			<arg value="${wtk.home}/lib/${wtk.midp.jar}" />
			-->
			<arg value="-classpath" />
			<arg value="${rt.jar}" />
			<arg value="-d" />
			<arg value="${classes}" />
			<arg value="${comp.src}" />
		</java>
	</target>

	<target name="findbugs" depends="prepare" if="findbugs.home" >
    	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
		<mkdir dir="${analyze}" />
		<findbugs home="${findbugs.home}"
			  jvmargs="-Xms512m -Xmx1024m"
              output="html" reportLevel="medium"
              outputFile="${analyze}/findbugs-${build.file.root}.html"
              stylesheet="plain.xsl" >
      <auxClasspath>
		  <pathelement location="${findbug.classes}" />
		  <fileset dir="${wtk.home}/lib" >
			  <include name="*.jar" />
		  </fileset>
		  <fileset dir="${wtk.home}/bin" >
			  <include name="*.jar" />
		  </fileset>
      </auxClasspath>
      <sourcePath path="${comp.src}" />
      <class location="${classes}" />
    </findbugs>
  </target>

	<path id="pmd.classpath">
		<fileset dir="${pmd.home}/lib/">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="pmd" depends="prepare" if="pmd.home" >
		<mkdir dir="${analyze}" />
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />
		<pmd rulesetfiles="rulesets/favorites.xml" encoding="UTF-8" >
			  <!-- undo
			  <formatter type="net.sourceforge.pmd.renderers.HTMLRenderer" toFile="${analyze}/pmd-${build.file.root}.html"/>
			  -->
			  <formatter type="xml" toFile="${analyze}/pmd-${build.file.root}.xml"/>
			  <fileset dir="${comp.src}">
				  <include name="**/*.java"/>
			  </fileset>
		  </pmd>
		  <xslt style="${pmd.xsl}" in="${analyze}/pmd-${build.file.root}.xml" out="${analyze}/pmd-${build.file.root}.txt" />
		  <exec executable="${cat.cmd}" >
			  <arg value="${analyze}/pmd-${build.file.root}.txt" />
		  </exec>
	  </target>

	<target name="util.comp.copy" depends="prepare" if="util.comp.src" >
		<antcall target="util.comp.copy" />
		<copy todir="${util.comp.src}" overwrite="true" >
			<fileset dir="${util.tmppreprocess}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
	</target>

	<!-- Copy preprocessed src to unprocessed source to allow the -->
	<!-- src to be checked in or compiled with Netbeans -->
	<target name="copy.comp.src" depends="prepare" if="unproc.src" >
		<copy todir="${src}" overwrite="true" >
			<!-- remove compatibility classes as these are kept in compatsrc -->
			<!-- remove testui classes as these are kept in testui -->
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
		<antcall target="delete.test.src" >
			<param name="dsrc" value="${src}" />
		</antcall>
	</target>

	<!-- Delete preprocessed test src in src -->
	<target name="delete.test.src" depends="prepare" if="no.test">
		<echo message="Deleting test src ${dsrc}." />
		<delete includeemptydirs="true" failonerror="false" >
			<!-- remove testui classes as these are kept in testui -->
			<fileset dir="${dsrc}" includes="**/Compatibility*,**/substanceofcode/testutil/**,**/testlcdui/*.java,**/jmunit/**" />
			<fileset dir="${dsrc}/net/sf/${log.subdir}" />
		</delete>
	</target>

	<target name="copy.unproc.comp" depends="prepare" if="unproc.src" >
		<echo message="src.excludes=${src.excludes}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${unproc.src}" includes="**/*.java" excludes="${src.excludes}" />
		</copy>
	</target>

	<target name="copy.util.comp" depends="prepare" if="util.src" >
		<copy todir="${util.comp.src}" overwrite="true" >
			<fileset dir="${util.src}" includes="**/*.java" />
		</copy>
	</target>

	<target name="copy.comp.svn" depends="prepare" if="copy.comp.svn" >
		<copy todir="${src}" overwrite="true" >
			<fileset dir="${comp.src}" />
		</copy>
	</target>

	<target name="wtk.src.copy" if="wtk.src" >
		<delete includeEmptyDirs="true" >
			<fileset dir="${wtk.src}" includes="**/*.java" />
		</delete>
		<copy todir="${wtk.src}" >
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
	</target>

	<path id="project.classpath">
		<pathelement location="lib/JLogMicro.jar" />
	</path>

	<target name="compile" depends="prepare">

		<!-- Copy a JAD file from the WTK's demo applications.
             Caution: Ant only copies this the first time. Also
             make a directory to compile into. -->

		<!-- Delete directory to compile so that we start fresh for cases -->
		<!-- when we delete a file. -->
		<delete dir="${comp.src}" />
		<mkdir dir="${comp.src}" />
		<antcall target="copy.unproc.comp" />
		<antcall target="copy.util.comp" />
		<antcall target="preprocess" />
		<!-- Compile everything, but don't preverify (yet). -->
		<antcall target="display.props" />

		<echo message="add.jars=${add.jars}" />
		<antcall target="add.jars" />
		<antcall target="copy.jar.src" />
		<antcall target="wtk.src.copy" />
		<antcall target="display.props" />
		<wtkbuild srcdir="${comp.src}" destdir="${classes}" preverify="false" >
		<!--
			<classpath>
				<path refid="logging.lib" />
			</classpath>
			-->
		</wtkbuild>
		<!--
		<wtkbuild srcdir="${comp.src}:${util.comp.src}" destdir="${classes}" preverify="false" />
		-->

	</target>

	<target name="build.testdata" depends="prepare" >
		<echo message="project.test.url=${project.test.url}" />
		<delete dir="${webtestdata}" />
		<copy todir="${webtestdata}" >
			<fileset dir="../testdata" />
		</copy>
		<replace dir="${webtestdata}" token="jar://" value="${project.test.url}" />
		<delete dir="${filetestdata}" />
		<copy todir="${filetestdata}" >
			<fileset dir="../testdata" />
		</copy>
		<replace dir="${filetestdata}" token="jar://" value="${file.test.url}" />
	</target>

	<target name="add.jars" depends="prepare" if="add.jars" >
		<unjar src="${ext.jar}" dest="${classes}" />
		<delete includeEmptyDirs="true" >
			<fileset dir="${classes}/META-INF" />
			<fileset dir="${classes}" includes="**/${project.name}.jad" />
			<fileset dir="${classes}" includes="**/*MIDlet*" />
		</delete>
	</target>

	<target name="copy.jar.src" if="copy.jar.src" >
		<copy todir="${comp.src}" >
			<fileset dir="${jarsrc}" excludes="**/*MIDlet*" />
		</copy>
	</target>

	<!-- Copy compatsrc to target src directory. -->
	<target name="copy.compat" if="copy.compat" >
		<echo message="copy.compat=${copy.compat}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${compat.src}" includes="**/*.java" />
		</copy>
	</target>

	<!-- Copy testui to target src directory. -->
	<target name="copy.testui" if="copy.testui" >
		<echo message="copy.testui=${copy.testui}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${testui.src}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
	</target>

	<!-- Copy testui to target src directory. -->
	<target name="copy.unproc.testui" if="copy.unproc.testui" >
		<echo message="copy.unproc.testui=${copy.unproc.testui}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${testui.src}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
	</target>

	<target name="copy.res" if="need.res" depends="prepare" >
		<property name="res.excludes" value="bogus" />
		<echo message="res.excludes=${res.excludes}" />
		<delete dir="${to.res.dir}" />
		<mkdir dir="${to.res.dir}" />
		<copy todir="${to.res.dir}" >
			<fileset dir="${icon.dir}" >
				<include name="**/*.png" />
				<include name="**/*.wav" />
				<exclude name="${res.excludes}" />
			</fileset>
		</copy>
		<copy todir="${to.res.dir}" >
			<filterset refid="midlet.info" />
			<fileset dir="${icon.dir}" >
				<include name="**/*.txt" />
				<exclude name="${res.excludes}" />
			</fileset>
		</copy>
		<!-- undo remove?
		<copy todir="${tmpres}/icons" >
			<fileset dir="${icon.dir}" >
				<include name="**/*.png" />
			</fileset>
		</copy>
		undo? -->
		<!-- UNDO -->
		<copy todir="${to.res.dir}/en" >
			<fileset dir="${icon.dir}" >
				<include name="**/*.png" />
				<include name="**/*.wav" />
				<exclude name="${res.excludes}" />
			</fileset>
		</copy>
		<copy todir="${to.res.dir}/en" >
			<filterset refid="midlet.info" />
			<fileset dir="${icon.dir}" >
				<include name="**/*.txt" />
				<exclude name="${res.excludes}" />
			</fileset>
		</copy>
		<copy todir="${to.res.dir}/${msg.todir}" >
			<filterset refid="midlet.info" />
			<fileset dir="${msg.dir}" >
				<include name="**/*.txt" />
				<exclude name="${res.excludes}" />
			</fileset>
		</copy>
		<!-- UNDO -->
		<copy todir="${to.res.dir}/${msg.base.todir}" flatten="true" >
			<filterset refid="midlet.info" />
			<fileset dir="${msg.dir}" >
				<include name="**/*.txt" />
				<exclude name="${res.excludes}" />
			</fileset>
		</copy>
		<delete >
			<fileset dir="${to.res.dir}" includes="${res.excludes}" />
		</delete>
		<!-- undo
		<mkdir dir="${tmpres}/data" />
		<xslt style="${msg.dir}/props.xsl" in="${msg.dir}/${language.file}" out="${tmpres}/data/lang.txt" />
		-->
	</target>

	<target name="copy.test.res" if="need.test.res" >
		<if>
			<equals arg1="${need.test.res}" arg2="true" />
			<then>
			<copy todir="${tmpres}/${res.test.todir}" >
				<fileset dir="${res.test.dir}" />
			</copy>
			</then>
		</if>
	</target>

	<target name="build" depends="prepare" >
		<antcall target="display.props" />
		<!-- Copy a JAD file from the WTK's demo applications.
             Caution: Ant only copies this the first time. Also
             make a directory to compile into. -->
		<mkdir dir="${bin}" />
		<delete dir="${tmpres}" />
		<mkdir dir="${tmpres}" />

		<antcall target="copy.res" >
			<param name="to.res.dir" value="${tmpres}/${res.todir}" />
		</antcall>
		<antcall target="copy.test.res" />

		<copy file="${res}/${project.name}.jad" todir="${bin}" overwrite="true" >
			<filterset refid="midlet.info" />
			<filterset>
				<filter token="MIDLETURL" value="${MIDLETURL_ROOT}${separator}${build.file.root}.jar" />
			</filterset>
		</copy>
		<copy file="${res}/${project.name}.alx" todir="${bin}" overwrite="true" >
			<filterset refid="midlet.info" />
		</copy>

		<copy file="${res}/manifest.mf" todir="${bin}" overwrite="true" >
			<filterset refid="midlet.info" />
		</copy>

		<antcall target="cat.to.midlet" >
			<param name="concat.jad" value="${logging-concat.jad}" />
			<param name="concat.jad" value="${logging-concat.nbr}" />
		</antcall>
		<antcall target="cat.to.midlet" >
			<param name="concat.jad" value="${Oware-concat.jad}" />
			<param name="concat.nbr" value="${Oware-concat.nbr}" />
		</antcall>
		<antcall target="cat.to.midlet" >
			<param name="concat.jad" value="${jlogmicro.jad}" />
			<param name="concat.nbr" value="${jlogmicro.nbr}" />
		</antcall>
		<antcall target="cat.to.midlet" >
			<param name="concat.jad" value="${Reversi-concat.jad}" />
			<param name="concat.nbr" value="${Reversi-concat.nbr}" />
		</antcall>
		<antcall target="cat.to.midlet" >
			<param name="concat.jad" value="${Minesweeper-concat.jad}" />
			<param name="concat.nbr" value="${Minesweeper-concat.nbr}" />
		</antcall>
		<antcall target="cat.to.midlet" >
			<param name="concat.jad" value="${Testsuite-concat.jad}" />
			<param name="concat.nbr" value="${Testsuite-concat.nbr}" />
		</antcall>

		<echo message="MIDLETVERS=${MIDLETVERS}" />

		<!-- Package everything. Most of the necessary information is
             contained in the JAD file. Also preverify the result this
             time. To obfuscate everything, set the corresponding
             parameter to "true" (requires RetroGuard or ProGuard). The
             version parameter increments the MIDlet-Version by one. -->

	    <echo message="obfuscate=${obfuscate}" />
		<!-- package and preverify -->
		<!-- not needed
		<property name="libclasspath" value="../lib/midp20_jlogmicro.jar" />
		-->
		<wtkpackage jarfile="${bin}/${project.name}.jar" jadfile="${bin}/${project.name}.jad" manifest="${bin}/manifest.mf" cldc="${JCLDCVERS}" profile="${JMIDPVERS}" preverify="true" obfuscate="${obfuscate}" >

			<!-- Package our newly compiled classes and the
                 resources from the WTK's demo application. -->

			<fileset dir="${classes}" />
			<fileset dir="${tmpres}" />

		</wtkpackage>

		<wtkobfuscate jarfile="${bin}/${project.name}.jar" obfuscator="proguard" jadfile="${bin}/${project.name}.jad" if="keep.obfuscate" >
			<argument value="-keep public class ${obfuscate.classes}" />
		</wtkobfuscate>
		<!-- Include version in the file so that they can be uploaded to -->
		<!-- download sites where the name must be unique.  -->

		<copy file="${bin}/${project.name}.jad" tofile="${bin}/${build.file.root}.jad" />
		<copy file="${bin}/${project.name}.jar" tofile="${bin}/${build.file.root}.jar" />
		<copy file="${bin}/${build.file.root}.jar" todir="${dist}" />
		<copy file="${bin}/${build.file.root}.jad" todir="${dist}" />
		<copy file="${bin}/${project.name}.alx" tofile="${dist}/${alx.build.file.root}.alx" />
		<copy file="${bin}/${project.name}.jar" tofile="${build}/${build.prefix}${build.jar}" />
		<antcall target="create.prc" inheritAll="true" />
		<!-- Manifest changes based on MIDP/JSR's so use prefixes to -->
		<!-- identify which is which -->
		<copy file="${bin}/manifest.mf" todir="${build}/${build.prefix}manifest-${FMIDLETVERSROOT}.mf" overwrite="true" />

		<!-- undo
		<copy todir="${dist}" >
			<fileset file="${docs}/README.txt" />
			<filterset>
				<filter token="STAGE" value="${stage}" />
			</filterset>
		</copy>
		-->
	</target>

	<target name="create.prc" depends="prepare" if="wtk.wme.home" >
		<wtkmakeprc jarfile="${bin}/${project.name}.jar" name="${project.name}"  highres="true" creator="${prc.creater}" longname="${prc.longname}" />
		<delete dir="${dist}/${build.file.root}_prc" />
		<mkdir dir="${dist}/${build.file.root}_prc" />
		<move file="${bin}/${project.name}.prc" todir="${dist}/${build.file.root}_prc" />
		<jar destfile="${dist}/${build.file.root}_prc.zip" basedir="${dist}/${build.file.root}_prc" manifest="${bin}/manifest.mf" />
	</target>

	<target name="cat.to.midlet" depends="prepare" if="${concat.jad}" >
		<echo message="concat.jad=${concat.jad}" />
		<mkdir dir="${tmpcat}" />
		<copy file="${res}/${concat.jad}" todir="${tmpcat}" >
			<filterset refid="midlet.info" />
			<filterset >
				<filter token="MIDLETNBR" value="${concat.nbr}" />
			</filterset>
		</copy>
		<concat destfile="${bin}/${project.name}.jad" append="true" >
			<fileset file="${tmpcat}/${concat.jad}" />
		</concat>
		<concat destfile="${bin}/manifest.mf" append="true" >
			<fileset file="${tmpcat}/${concat.jad}" />
		</concat>
	</target>

	<target name="cat.logging.midlet" depends="prepare" if="jlogmicro.jad" >
		<concat destfile="${bin}/${project.name}.jad" append="true" >
			<fileset file="${res}/${jlogmicro.jad}" />
		</concat>
		<concat destfile="${bin}/manifest.mf" append="true" >
			<fileset file="${res}/${jlogmicro.jad}" />
		</concat>
	</target>

	<target name="create.rim.files" depends="prepare" if="rim.home">
		<copy file="${dist}/${build.file.root}.jad" tofile="${dist}/${build.file.root}_cod.jad" />
		<exec executable="${rim.home}\\bin\\rapc" >
			<arg value="import=&quot;${rim.home}\\lib\\net_rim_api.jar&quot;" />
			<arg value="codename=${project.name}" />
			<arg value="-midlet" />
			<arg value="jad=${dist}/${build.file.root}_cod.jad" />
			<arg value="${dist}/${build.file.root}.jar" />
		</exec>
		<move file="${project.name}.cso" tofile="${dist}/${build.file.root}.cso" />
		<move file="${project.name}.cod" tofile="${dist}/${build.file.root}.cod" />
		<move file="${project.name}.debug" tofile="${dist}/${build.file.root}.debug" />
	</target>

	<target name="svn.op.dist" unless="skip.svn.op" >
		<delete dir="${op.dir}" />
		<mkdir dir="${op.dir}" />

		<if>
			<equals arg1="${need.svn.preprocessed}" arg2="true" />
			<then>
			<exec executable="${svn.pgm}" dir="${op.dir}" >
				<arg value="${svn.op}" />
				<arg value="${svn.url}" />
				<arg value="${svn.src}" />
			</exec>
			</then>
		</if>

		<if>
			<equals arg1="${need.svn.preprocessed}" arg2="true" />
			<then>
			<move todir="${op.dir}/src" >
				<fileset dir="${op.dir}/${svn.src}/src" />
			</move>
			<move todir="${op.dir}/presrc" >
				<fileset dir="${op.dir}/${svn.src}/presrc" />
			</move>
			<!-- undo
			<move todir="${op.dir}/testdata" >
				<fileset dir="${op.dir}/${svn.src}/testdata" />
			</move>
			-->
			<!-- undo
			<move todir="${op.dir}/translations" >
				<fileset dir="${op.dir}/${svn.src}/translations" />
			</move>
			-->
			<move todir="${op.dir}/zipedsrc" >
				<fileset dir="${op.dir}/${svn.src}/zipedsrc" />
			</move>
			<move todir="${op.dir}/wtkbuild" >
				<fileset dir="${op.dir}/${svn.src}/wtkbuild" />
			</move>
			<copy todir="${dist}" >
				<fileset file="${op.dir}/${svn.src}/release_notes.txt" />
				<fileset file="${op.dir}/${svn.src}/gpl.txt" />
			</copy>
			<move todir="${op.dir}" >
				<fileset file="${op.dir}/${svn.src}/release_notes.txt" />
				<fileset file="${op.dir}/${svn.src}/gpl.txt" />
			</move>
			<!-- undo
			<move todir="${op.dir}/nbproject" >
				<fileset dir="${op.dir}/${svn.src}/nbproject" />
			</move>
			-->
			<delete dir="${op.dir}/${svn.src}" />
			</then>
		</if>
		<!--
		<svn javahl="false" >
			<export srcUrl="${svn.url}" srcPath="${svn.src}" destPath="${op.dir}" />
		</svn>
		-->
	</target>

	<!-- Distribute expoted source to ${preprocessed} -->
	<target name="dist.preprocessed" if="need.dist.preprocessed" >
		<delete dir="${preprocessed}" />
		<mkdir dir="${preprocessed}" />
		<copy todir="${preprocessed}/src" >
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
	</target>

	<target name="dist.svn" if="need.dist.svn" >
		<antcall target="svn.op.dist" >
			<param name="svn.op" value="export" />
			<param name="op.dir" value="${svnexport}" />
		</antcall>
	</target>

	<target name="dist.svn.dirs" depends="prepare" if="need.dist.svn.dirs" >
		<antcall target="svn.op.dist" >
			<param name="svn.op" value="export" />
			<param name="op.dir" value="${main}" />
		</antcall>
	</target>

	<!-- Distribute the version (e.g. MIDP-1.0, MIDP-2.0, etc) to -->
	<!-- it's target/build and target/dist target/main -->
		 
	<target name="dist.version" depends="prepare" >
		<property name="no.test" value="true" />
		<antcall target="act.dist.version" inheritAll="true" />
	</target>

	<!-- Distribute the version (e.g. MIDP-1.0, MIDP-2.0, etc) to -->
	<!-- it's target/build and target/dist target/main -->
		 
	<target name="act.dist.version" depends="prepare" >
		<delete dir="${dist.vers}" />
		<mkdir dir="${dist.vers}" />
		<!-- delete TODO
		<delete dir="${build.vers}" />
		<mkdir dir="${build.vers}" />
		-->
		<antcall target="clean.compile" />
		<antcall target="compile" />
		<antcall target="dist.preprocessed" />

		<delete dir="${compiled}" />
		<copy todir="${compiled}" >
			<fileset dir="${classes}" />
		</copy>
		<antcall target="build" inheritAll="true" >
			<param name="build.jar" value="before-obfuscation.jar" />
		</antcall>
		<delete dir="${preverified}" />
		<mkdir dir="${preverified}" />
		<unjar src="${build}/${build.prefix}before-obfuscation.jar" dest="${preverified}" />
		<antcall target="build" >
			<param name="build.jar" value="obfuscated.jar" />
		</antcall>
		<if>
			<equals arg1="${need.rim}" arg2="true" />
			<then>
			<antcall target="create.rim.files" inheritAll="true" />
			</then>
		</if>
		<delete dir="${obfuscated}" />
		<mkdir dir="${obfuscated}" />
		<unjar src="${build}/${build.prefix}obfuscated.jar" dest="${obfuscated}" />
		<delete dir="${obfuscated}/MANIFEST.MF" />
		<delete file="${project.name}.jar" />
		<delete dir="${dist.vers}" />
	</target>

	<!-- Compile using WTK with MIDP-1.0 and test -->
	<target name="compile.1.0">
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-1.0 and test -->
	<target name="compile.1.0.large">
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk1.0large.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and test -->
	<target name="compile.2.0">
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and no graphics and test -->
	<target name="compile.2.0.no.graphics">
		<antcall target="compile" >
			<param name="GRAPHICS" value="false" />
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 CLDC-1.1 and test -->
	<target name="compile.2.0.cldc1.1">
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and JSR-135 and test -->
	<target name="compile.2.0.jsr135" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr135.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, CLDC 1.1 and JSR-75 and test -->
	<target name="compile.2.0.cldc1.1.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, CLDC 1.1 and JSR-135 and test -->
	<target name="compile.2.0.cldc1.1.jsr135" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr135.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with Large memory, MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.large.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0large.jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with Large memory, MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.cldc1.1.large.jsr75.jsr82.jsr184" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0large.cldc1.1.jsr75.jsr82.jsr184.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with Large memory, MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.cldc1.1.large.jsr75.jsr82.jsr135.jsr184" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0large.cldc1.1.jsr75.jsr82.jsr135.jsr184.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Run using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="run.2.0.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="build" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="run.dist.version" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, JSR-75, previous code and test -->
	<target name="compile.2.0.jsr75.test" >
		<antcall target="display.props" />
		<antcall target="compile" inheritAll="true" >
			<param name="src" value="${src}" />
			<param name="unproc.src" value="${unproc.src}" />
			<param name="presrc" value="${presrc}" />
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 1.0 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.1.0" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0 as a release (no test) -->
	<!-- This puts the code into src directory. -->
	<target name="dist.preprocess.2.0" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0 and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.jsr75" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Future preprocess for MIDP 2.0 and JSR-238 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.jsr238" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- test preprocess for MIDP 2.0 and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="test.preprocess.2.0.jsr75" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0.jsr75.properties${wtk.template}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0.jsr75.properties${wtk.template}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 1.0 as a release (no test) -->
	<target name="dist.compile.1.0" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 as a release (no test) -->
	<target name="dist.compile.2.0" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 as a release (with no graphics) -->
	<target name="dist.compile.2.0.no.graphics" >
		<antcall target="compile" >
			<param name="GRAPHICS" value="false" />
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 and JSR-75 for release -->
	<target name="dist.compile.2.0.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 and JSR-135 for release -->
	<target name="dist.compile.2.0.jsr135" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr135.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0, CLDC 1.1 and JSR-75 for release -->
	<target name="dist.compile.2.0.cldc1.1.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0, CLDC 1.1 and JSR-135 for release -->
	<target name="dist.compile.2.0.cldc1.1.jsr135" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr135.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0, JSR-75, JSR-82, JSR-135, and JSR-184 for release -->
	<target name="dist.compile.2.0.cldc1.1.large.jsr75.jsr82.jsr135.jsr184" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0large.cldc1.1.jsr75.jsr82.jsr135.jsr184.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Future.  No code for JSR-238 now. -->
	<!-- Compile for MIDP 1.0 as a release (no test) -->
	<target name="compile.2.0.jsr238" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- These are do create release versions for MIDP-1.0, MIDP-2.0, -->
	<!-- MIDP-2.0 itunes, MIDP-2.0 and JSR-75, and MIDP-2.0 and -->
	<!--JSR-75 -->
	<target name="dist.midp.1.0" unless="no.1.0" depends="prepare.games" >
		<antcall target="dist.version" inheritAll="yes" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp10}" />
			<param name="build.vers" value="${build.midp10}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.1.0.large" unless="no.1.0.large" >
		<antcall target="dist.version" inheritAll="yes" >
			<param name="wtk.properties" value="wtk1.0large.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp10.large}" />
			<param name="build.vers" value="${build.midp10.large}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0" unless="no.2.0" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20}" />
			<param name="build.vers" value="${build.midp20}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.large" unless="no.2.0.large" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0large.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.large}" />
			<param name="build.vers" value="${build.midp20.large}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1" unless="no.2.0.cldc.1.1" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11}" />
			<param name="build.vers" value="${build.midp20.cldc11}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr75" unless="no.2.0.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr75}" />
			<param name="build.vers" value="${build.midp20.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr135" unless="no.2.0.jsr135" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0jsr135.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr135}" />
			<param name="build.vers" value="${build.midp20.jsr135}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr135.large" unless="no.2.0.jsr135.large" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0large.jsr135.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.large.jsr135}" />
			<param name="build.vers" value="${build.midp20.large.jsr135}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.jsr75" unless="no.2.0.cldc.1.1.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.jsr135" unless="no.2.0.cldc.1.1.jsr135" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr135.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr135}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr135}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.jsr75.largemem" unless="no.2.0.cldc.1.1.jsr75.largemem" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0large.cldc1.1.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75.largemem}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75.largemem}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.largemem" unless="no.2.0.cldc.1.1.largemem" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0large.cldc1.1.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.largemem}" />
			<param name="build.vers" value="${build.midp20.cldc11.largemem}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr75.jsr82.jsr184.largemem" unless="no.2.0.cldc.1.1.jsr75.jsr82.jsr184.largemem" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0large.cldc1.1.jsr75.jsr82.jsr184.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75.jsr82.jsr184.largemem}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75.jsr82.jsr184.largemem}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.jsr75.jsr82.jsr135.jsr184" unless="no.2.0.cldc.1.1.jsr75.jsr82.jsr135.jsr184" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.jsr82.jsr135.jsr184.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75.jsr82.jsr135.jsr184}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75.jsr82.jsr135.jsr184}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr75.jsr82.jsr135.jsr184.largemem" unless="no.2.0.cldc.1.1.jsr75.jsr82.jsr135.jsr184.largemem" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0large.cldc1.1.jsr75.jsr82.jsr135.jsr184.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75.jsr82.jsr135.jsr184.largemem}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75.jsr82.jsr135.jsr184.largemem}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="log.midp.2.0.cldc.1.1.jsr75" unless="no.2.0.cldc.1.1.jsr75" >
		<property name="obfuscate" value="yes" />
		<property file="${basedir}/test.properties${test.template}" />
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr238" unless="no.2.0.jsr238" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr75}" />
			<param name="build.vers" value="${build.midp20.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 1.0 version. -->
	<target name="package.midp.1.0"  >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp10}" />
			<param name="build.vers" value="${build.midp10}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 version. -->
	<target name="package.midp.2.0"  >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20}" />
			<param name="build.vers" value="${build.midp20}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 with JSR-75 version. -->
	<target name="package.midp.2.0.jsr75" unless="no.2.0.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr75}" />
			<param name="build.vers" value="${build.midp20.jsr75}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="run.dist.midp.2.0.jsr75" unless="no.2.0.jsr75" >
		<antcall target="run.dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr75}" />
			<param name="build.vers" value="${build.midp20.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="run.dist.midp.2.0.cldc.1.1.jsr75" unless="no.2.0.jsr75" >
		<!-- FIX <antcall target="run" inheritAll="true" > -->
		<antcall target="run.dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75}" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.dev.status" depends="release.buildno,release.prepare" >
		<antcall target="clean" />
		<delete dir="${dist}" />
		<mkdir dir="${dist}" />
		<delete dir="${build}" />
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	    <echo message="main build.number=${build.number}" />
		<antcall target="dist.svn.dirs" />
		<antcall target="dist.midp.1.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.1.0.large" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.jsr135" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.jsr135.large" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.large" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.jsr135" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<!-- Don't need JSR-75 -->
		<!--
		<antcall target="dist.midp.2.0.cldc.1.1.largemem" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		-->
		<antcall target="dist.midp.2.0.jsr75.jsr82.jsr184.largemem" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.jsr75.jsr82.jsr135.jsr184.largemem" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.jsr75.jsr82.jsr135.jsr184" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.preprocess.2.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
	</target>

	<target name="dist" >
		<antcall target="dist.dev.status" inheritAll="true" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.reversi" depends="prepare.reversi" >
		<antcall target="dist" inheritAll="true" >
		</antcall>
	</target>

	<target name="dist.testsuite" depends="prepare.testsuite" >
		<antcall target="dist" inheritAll="true" >
			<!--UNDO when fix tests. -->
		</antcall>
	</target>

	<target name="dist.games" depends="prepare.games" >
		<antcall target="dist" inheritAll="true" >
			<param name="no.1.0.large" value="true" />
			<param name="no.2.0.jsr135.large" value="true" />
			<param name="no.2.0.large" value="true" />
			<param name="no.2.0.jsr135.large" value="true" />
			<param name="no.2.0.cldc.1.1.jsr75.largemem" value="true" />
			<param name="no.2.0.cldc.1.1.largemem" value="true" />
			<param name="no.2.0.cldc.1.1.jsr75.jsr82.jsr184.largemem" value="true" />
			<param name="no.2.0.cldc.1.1.jsr75.jsr82.jsr135.jsr184.largemem" value="true" />
			<param name="src.excludes" value="**/testsuite/**,testsuite/**" />
			<param name="res.excludes" value="**/testsuite*,testsuite*" />
			<param name="Testsuite-concat.jad" value="" />
		</antcall>
	</target>

	<target name="copy.device.bin" depends="prepare" >
		<mkdir dir="${midlet.home}/${bin}" />
		<copy file="${bin}/${project.name}.jar" tofile="${midlet.home}/${bin}/${project.name}.jar" overwrite="true" />
		<copy file="${bin}/${project.name}.jad" tofile="${midlet.home}/${bin}/${project.name}.jad" />
	</target>

	<!-- Start the MIDlet suite -->
	<target name="run" depends="prepare" >
		<wtkrun jadfile="${dist}/${build.file.root}.jad" device="DefaultColorPhone" wait="false" />

	</target>

	<target name="run.dist.version"  depends="prepare" >
		<echo message="emulator.jar=${emulator.jar}" />
		<property name="run.jar" value="${dist}/${build.file.root}.jar" />
		<echo message="jar=${run.jar}" />
		<java classname="${emulator.class}" fork="true" >
			<classpath>
				<pathelement location="${emulator.jar}" />
				<pathelement location="${run.jar}" />
			</classpath>
			<arg value="${midlet.class}" />
		</java>
	</target>

</project>
